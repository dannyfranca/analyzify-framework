window.ANALYZIFY = window.ANALYZIFY || {};

window.A = ANALYZIFY;

window.dataLayer = window.dataLayer || [];

ANALYZIFY.create = function(callback) {
    var jqObj = false;
    return {
        func: function(jqObj) {
            callback(jqObj);
        }
    };
};

function echo() {
    console.log("echo");
}

ANALYZIFY.echos = function(x, y, alert) {
    if (x && y) {
        var echo = "(" + typeof x + ") x: " + x + " / " + "(" + typeof y + ") y: " + y;
    } else if (x) {
        var echo = "(" + typeof x + ") x: " + x;
    } else if (y) {
        var echo = "(" + typeof y + ") y: " + y;
    } else {
        var echo = "no param";
    }
    alert !== true ? console.log(echo) : alert(echo);
};

ANALYZIFY.getUrlPath = function(n) {
    var path = window.location.pathname.toLowerCase();
    if (n) {
        path = path.split("/")[n];
    }
    return path;
};

ANALYZIFY.QueryStringToJSON = function() {
    var pairs = location.search.slice(1).split("&");
    var result = {};
    pairs.forEach(function(pair) {
        pair = pair.split("=");
        result[pair[0]] = decodeURIComponent(pair[1] || "");
    });
    return JSON.parse(JSON.stringify(result));
};

ANALYZIFY.urlParam = function(name) {
    var results = new RegExp("[?&]" + name + "=([^]*)").exec(window.location.href);
    if (results === null) {
        return null;
    } else {
        return results[1] || 0;
    }
};

ANALYZIFY.customEntries = ANALYZIFY.customEntries || {};

ANALYZIFY.customEntries.pageHidden = ANALYZIFY.customEntries.pageHidden || {};

ANALYZIFY.customEntries.pageShow = ANALYZIFY.customEntries.pageShow || {};

ANALYZIFY.customEntries.beforeUnload = ANALYZIFY.customEntries.beforeUnload || {};

ANALYZIFY.customEntries.exitIntent = ANALYZIFY.customEntries.exitIntent || {};

ANALYZIFY.customEntries.scroll = ANALYZIFY.customEntries.scroll || {};

ANALYZIFY.customEntries.resize = ANALYZIFY.customEntries.resize || {};

ANALYZIFY.customEntries.normalize = ANALYZIFY.customEntries.normalize || {};

ANALYZIFY.changeVar = function(variable, value) {
    if (typeof variable !== "undefined" && typeof value !== "undefined") {
        window[variable] = value;
    } else if (typeof variable === "undefined") {
        console.error('changeVar: "variable" parameter must be defined');
    } else if (typeof value === "undefined") {
        console.error('changeVar: "value" parameter must be defined');
    } else {
        console.error("changeVar: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
    }
};

ANALYZIFY.dlPush = function(cat, act, lab, val, nInt, tran, exc, obj) {
    cat = checkType(cat);
    act = checkType(act);
    lab = checkType(lab);
    val = checkType(val);
    nInt = nInt ? nInt === true || nInt === "true" || nInt === 1 ? true : false : false;
    tran = tran ? "beacon" : null;
    exc = exc ? String(exc) : null;
    var event = {
        eventCategory: cat,
        eventAction: act,
        eventLabel: lab,
        eventValue: val
    };
    var push = {
        eventCategory: cat,
        eventAction: act,
        eventLabel: lab,
        eventValue: val,
        nonInteraction: nInt,
        transport: tran,
        exceptions: exc,
        event: "legacyEvent"
    };
    if (typeof obj === "object" && obj !== null) {
        Object.assign(push, obj);
    }
    if (cat && act && ANALYZIFY.debug !== true && ANALYZIFY.debug.dlPush !== true) {
        if (typeof obj === "object" && obj !== null) {
            Object.assign(event, obj);
        }
        Object.assign(push, {
            pushObject: event
        });
        window.dataLayer.push(push);
    } else if (ANALYZIFY.debug === true || ANALYZIFY.debug.dlPush === true) {
        console.log(JSON.stringify(push));
    } else if (!cat) {
        console.error("dlPush: Event Category param must be defined");
    } else if (!act) {
        console.error("dlPush: Event Action param must be defined");
    } else {
        console.error("dlPush: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
    }
    function checkType(param) {
        return param ? isNaN(Number(param)) ? String(param) : typeof param === "boolean" ? param : Number(param) : null;
    }
    $(function() {
        ANALYZIFY.jqLink.func({
            sessionAlive: []
        });
    });
};

ANALYZIFY.BASE = document.location.hostname;

ANALYZIFY.page = document.location.protocol + "//" + document.location.hostname + document.location.pathname + document.location.search;

ANALYZIFY.ajaxPage = ANALYZIFY.ajaxPage || false;

ANALYZIFY.tabHidden = ANALYZIFY.tabHidden || false;

ANALYZIFY.inject = ANALYZIFY.inject || {};

ANALYZIFY.timerIntervalObj = ANALYZIFY.timerIntervalObj || {
    300: 30,
    600: 60,
    3600: 300
};

ANALYZIFY.debug = ANALYZIFY.debug || {};

ANALYZIFY.debugParam = ANALYZIFY.urlParam("debug");

if (ANALYZIFY.debugParam !== null) {
    ANALYZIFY.debug[ANALYZIFY.debugParam] = true;
}

ANALYZIFY.utmSource = ANALYZIFY.urlParam("utm_source");

ANALYZIFY.utmMedium = ANALYZIFY.urlParam("utm_medium");

ANALYZIFY.utmCampaign = ANALYZIFY.urlParam("utm_campaign");

ANALYZIFY.utmTerm = ANALYZIFY.urlParam("utm_term");

ANALYZIFY.utmContent = ANALYZIFY.urlParam("utm_content");

window.dataLayer.push({
    originalLocation: ANALYZIFY.page,
    utmSource: ANALYZIFY.utmSource,
    utmMedium: ANALYZIFY.utmMedium,
    utmCampaign: ANALYZIFY.utmCampaign,
    utmTerm: ANALYZIFY.utmTerm,
    utmContent: ANALYZIFY.utmContent
});

$(function() {
    ANALYZIFY.height = $(window).outerHeight();
    ANALYZIFY.width = $(window).outerWidth();
    ANALYZIFY.hashVal = window.location.hash.replace(/^#/, "");
    ANALYZIFY.menuInitialHeight = $('[data-menu*="fixed-"]').length ? $('[data-menu*="fixed-"]').outerHeight() : 0;
    ANALYZIFY.logoDeltaHeight = $('[data-menu*="fixed-"]').length ? 27 : 0;
    ANALYZIFY.menuHeight = ANALYZIFY.menuInitialHeight - ANALYZIFY.logoDeltaHeight;
    ANALYZIFY.analyzifyInjection = function(select, attr, value) {
        if (typeof select === "undefined") {
            if (typeof ANALYZIFY.inject === "object" && ANALYZIFY.inject !== null) {
                for (var selector in ANALYZIFY.inject) {
                    $(selector).each(function(index) {
                        var counter = index + 1;
                        for (var attribute in ANALYZIFY.inject[selector]) {
                            var attrValue = String(ANALYZIFY.inject[selector][attribute]);
                            if (attrValue !== "") {
                                var match = attrValue.match(/\{\%([^}]+)\%\}/g);
                                if (match !== null) {
                                    var attrNames = [];
                                    $.each(match, function(i, el) {
                                        if ($.inArray(el, attrNames) === -1) attrNames.push(el);
                                    });
                                    for (var i in attrNames) {
                                        var attrName = attrNames[i].replace("{%", "").replace("%}", "");
                                        var getAttr = $(this).attr(attrName);
                                        if (typeof getAttr !== "undefined") {
                                            var regExp = new RegExp(attrNames[i], "g");
                                            attrValue = attrValue.replace(regExp, getAttr);
                                        } else {
                                            getAttr = $(this).find("[" + attrName + "]").attr(attrName);
                                            if (typeof getAttr !== "undefined") {
                                                var regExp = new RegExp(attrNames[i], "g");
                                                attrValue = attrValue.replace(regExp, getAttr);
                                            } else {
                                                console.error("Attribute " + attrName + " undefined in " + selector + "(index: " + index + ") and his children");
                                            }
                                        }
                                    }
                                }
                                if (attrValue.indexOf("[[count]]") !== -1) {
                                    attrValue = attrValue.replace(/\[{2}(count)\]{2}/g, counter);
                                }
                            }
                            $(this).attr(attribute, attrValue);
                        }
                    });
                }
            }
        } else if (typeof attr !== "undefined" && typeof value !== "undefined") {} else {
            console.error("Attribute and/or value must be defined");
        }
    };
    ANALYZIFY.analyzifyInjection();
    ANALYZIFY.setCustomEntry = function(name) {
        if (typeof name === "string") {
            if (typeof ANALYZIFY.customEntries[name] === "object" && ANALYZIFY.customEntries[name] !== null) {
                for (property in ANALYZIFY.customEntries[name]) {
                    ANALYZIFY.customEntries[name][property]["count"] = ANALYZIFY.customEntries[name][property]["count"] || 0;
                    if (typeof ANALYZIFY.customEntries[name][property]["limit"] === "undefined" || ANALYZIFY.customEntries[name][property]["count"] < ANALYZIFY.customEntries[name][property]["limit"]) {
                        if (typeof ANALYZIFY[property] === "function") {
                            if (typeof ANALYZIFY.customEntries[name][property]["params"] !== "undefined") {
                                if (jQuery.isArray(ANALYZIFY.customEntries[name][property]["params"])) {
                                    var params = ANALYZIFY.customEntries[name][property]["params"];
                                } else {
                                    console.warn("Custom entrie params from " + name + "." + property + " is not an array");
                                }
                            } else {
                                var params = [];
                            }
                            try {
                                ANALYZIFY[property].apply(this, params);
                            } catch (e) {
                                if (e instanceof SyntaxError) {
                                    console.error(e.message);
                                }
                            }
                        } else {
                            console.error(name + ": ANALYZIFY." + property + " is not a function");
                        }
                    }
                    if (typeof ANALYZIFY.customEntries[name][property]["limit"] !== "undefined") {
                        ANALYZIFY.customEntries[name][property]["count"]++;
                    }
                }
            }
        } else {
            console.error('setCustomEntry: "name" parameter must be seted and a string');
        }
    };
    ANALYZIFY.functionify = function(func) {
        if (typeof name === "string") {
            var match = func.match(/[a-zA-Z_$][0-9a-zA-Z_$]*\((['].*['])*[^()]*(['].*['])*\)/g);
            console.log(match);
            if (match !== null && match[0] === func) {
                func = func.substring(0, func.length - 1).split(/([^"']+)\(/).filter(Boolean);
                console.log(func[1]);
                func[1] = func[1].split(",");
                console.log(func[1]);
                if (typeof func[2] === "undefined") {
                    ANALYZIFY[func[0]].apply(this, func[1]);
                } else {
                    console.log("something wrong");
                }
            } else {
                console.error('functionify: "func" parameter must be function like. You seted: ' + func + " PS: You cannot use parenthesis and/or commas in parameter.");
            }
        } else {
            console.error('functionify: "func" parameter must be seted and an string');
        }
    };
    ANALYZIFY.jqLink = ANALYZIFY.create(function(jqObj) {
        if (jqObj) {
            for (property in jqObj) {
                try {
                    ANALYZIFY[property].apply(this, jqObj[property]);
                } catch (e) {
                    if (e instanceof SyntaxError) {
                        console.error(e.message);
                    }
                }
            }
        }
    });
    ANALYZIFY.load = false;
    $(window).on("load", function() {
        ANALYZIFY.load = true;
        window.dataLayer.push({
            event: "pageLoad"
        });
        if (ANALYZIFY.hashVal && $('[id="' + ANALYZIFY.hashVal + '_go"]').length) {
            var goto = $('[id="' + ANALYZIFY.hashVal + '_go"]').offset().top;
            $("html, body").animate({
                scrollTop: goto - ANALYZIFY.menuInitialHeight + ANALYZIFY.logoDeltaHeight
            }, 1e3);
            history.pushState("", document.title, window.location.pathname + window.location.search);
        }
        ANALYZIFY.normalize();
        ANALYZIFY.handleVisibilityChange();
    });
    ANALYZIFY.lastScrollTop = $(window).scrollTop();
    ANALYZIFY.scrollTop = $(window).scrollTop();
    $(window).scroll(function() {
        ANALYZIFY.scrollTop = $(this).scrollTop();
        ANALYZIFY.scrollDirection();
        ANALYZIFY.userNonIdle();
        if (ANALYZIFY.menuFixedTopExist === true) {
            ANALYZIFY.reduzMenu();
        }
        if (ANALYZIFY.botaoTopoExist === true) {
            ANALYZIFY.exibeBotaoTopo();
        }
        if (ANALYZIFY.scrollSpyExist === true && ANALYZIFY.load === true) {
            ANALYZIFY.scrollSpy();
        }
        if (ANALYZIFY.viewEventExist === true && ANALYZIFY.load === true) {
            ANALYZIFY.viewEvent();
        }
        ANALYZIFY.setCustomEntry("scroll");
        ANALYZIFY.lastScrollTop = ANALYZIFY.scrollTop;
    });
    ANALYZIFY.scrollDirDir;
    ANALYZIFY.scrollDirection = function() {
        if (ANALYZIFY.scrollTop > ANALYZIFY.lastScrollTop) {
            ANALYZIFY.scrollDirDir = 1;
        } else if (ANALYZIFY.scrollTop < ANALYZIFY.lastScrollTop) {
            ANALYZIFY.scrollDirDir = -1;
        }
    };
    $(window).resize(function() {
        ANALYZIFY.height = $(window).outerHeight();
        ANALYZIFY.width = $(window).outerWidth();
        ANALYZIFY.setCustomEntry("resize");
        ANALYZIFY.normalize();
    });
    ANALYZIFY.normalize = function() {
        if (ANALYZIFY.load === true) {
            if (ANALYZIFY.scrollSpyExist === true) {
                ANALYZIFY.scrollSpyCalc();
            }
            if (ANALYZIFY.viewEventExist === true) {
                ANALYZIFY.viewEventCalc();
            }
            if (ANALYZIFY.jSameHeightExist === true) {
                ANALYZIFY.sameHeight();
            }
            ANALYZIFY.setCustomEntry("normalize");
        }
    };
    ANALYZIFY.activeTimer = {};
    ANALYZIFY.activeTimer.firstActive = false;
    ANALYZIFY.activeTimer.idle = true;
    ANALYZIFY.activeTimer.idleTimer;
    ANALYZIFY.activeTimer.counter = 0;
    ANALYZIFY.activeTimer.aliveTimer;
    ANALYZIFY.activeTimer.activeMaster = false;
    ANALYZIFY.activeTimer.aliveCounter = 0;
    ANALYZIFY.activeTimer.activeTimer = setInterval(function() {
        if ((ANALYZIFY.activeTimer.idle === false || ANALYZIFY.activeTimer.activeMaster === true) && ANALYZIFY.activeTimer.firstActive === true) {
            ANALYZIFY.activeTimer.counter += 1;
            if (ANALYZIFY.debug === true || ANALYZIFY.debug.activeTimer === true) {
                console.log(ANALYZIFY.activeTimer.counter);
            }
        }
    }, 1e3);
    ANALYZIFY.activeTimer.path = ANALYZIFY.getUrlPath();
    ANALYZIFY.activeTimer.firstPath = ANALYZIFY.getUrlPath(1);
    $(window).focus(function() {
        ANALYZIFY.userNonIdle();
        ANALYZIFY.firstActive();
    });
    $(window).blur(function() {
        ANALYZIFY.activeTimer.idle = true;
    });
    $(window).on("keydown", function() {
        if (ANALYZIFY.load === true) {
            ANALYZIFY.userNonIdle();
            ANALYZIFY.firstActive();
        }
    });
    $(window).on("mousemove", function() {
        ANALYZIFY.userNonIdle();
        ANALYZIFY.firstActive();
    });
    $(window).on("mousedown", function() {
        ANALYZIFY.userNonIdle();
        ANALYZIFY.firstActive();
    });
    ANALYZIFY.timerInterval = function(interval, scope, counter) {
        if (typeof interval === "number") {
            return getInterval(interval);
        } else if (typeof interval === "object" && interval !== null) {
            var limits = Object.keys(interval);
            var limitsLength = limits.length;
            for (var i = 0; i <= limitsLength; i++) {
                if (!(i === limitsLength)) {
                    if (counter < parseInt(limits[i])) {
                        return getInterval(interval[limits[i]]);
                    }
                } else {
                    return getInterval(interval[limits[i - 1]], true);
                }
            }
        } else if (typeof interval === "undefined" || interval === null) {
            console.error('timerInterval: "interval" parameter must be defined');
        } else {
            console.error('timerInterval: "interval" parameter must be a number or object');
        }
        function getInterval(int, last) {
            var stringScope = String(scope);
            if (stringScope === "min") {
                var timerScope = 60;
            } else if (stringScope === "h") {
                var timerScope = 3600;
            } else if (stringScope === "%" || stringScope === "sec") {
                var timerScope = 1;
            } else {
                console.error("timerInterval: \"scope\" parameter must be defined as string 'sec', 'min', 'h' or '%'");
            }
            if (typeof timerScope === "number") {
                var divider = timerScope / int;
                var unities = parseInt(counter / int);
                var minutes = unities / divider;
                var margin = minutes + 1 / divider;
                if (last !== true) {
                    return minutes + " - " + margin + " " + stringScope;
                } else {
                    return minutes + "+ " + stringScope;
                }
            }
        }
    };
    $(window).on("beforeunload", function() {
        var eventLabel = ANALYZIFY.timerInterval(ANALYZIFY.timerIntervalObj, "min", ANALYZIFY.activeTimer.counter);
        ANALYZIFY.dlPush("Active Time", ANALYZIFY.ajaxPage === false ? ANALYZIFY.activeTimer.path.toLowerCase() : ANALYZIFY.ajaxPage.toLowerCase().replace(/(https:|http:|)\/\//, "").replace(ANALYZIFY.BASE, ""), ANALYZIFY.ajaxPage === false ? ANALYZIFY.activeTimer.firstPath.toLowerCase() : null, eventLabel, true, "beacon", null, {
            activeTime: ANALYZIFY.activeTimer.counter
        });
        for (var name in ANALYZIFY.customTimers) {
            if (ANALYZIFY.customTimers[name]["activeListener"] === true) {
                var eventLabel = ANALYZIFY.timerInterval(ANALYZIFY.timerIntervalObj, "min", ANALYZIFY.customTimers[name]["counter"]);
                ANALYZIFY.dlPush("Custom Time", ANALYZIFY.customTimers[name]["name"], ANALYZIFY.customTimers[name]["path"], eventLabel, true, "beacon", null, {
                    activeTime: ANALYZIFY.customTimers[name]["counter"]
                });
            }
        }
        ANALYZIFY.setCustomEntry("beforeUnload");
    });
    $(document).mouseleave(function() {
        ANALYZIFY.setCustomEntry("exitIntent");
    });
    ANALYZIFY.firstActive = function() {
        if (ANALYZIFY.activeTimer.firstActive === false) {
            window.dataLayer.push({
                event: "firstActive"
            });
            ANALYZIFY.activeTimer.firstActive = true;
            if (ANALYZIFY.viewEventExist === true && ANALYZIFY.load === true) {
                ANALYZIFY.viewEvent();
            }
            if (ANALYZIFY.debug === true || ANALYZIFY.debug.activity === true) {
                console.log("First Active");
            }
        }
    };
    ANALYZIFY.userNonIdle = function() {
        ANALYZIFY.activeTimer.idle = false;
        clearTimeout(ANALYZIFY.activeTimer.idleTimer);
        ANALYZIFY.activeTimer.idleTimer = setTimeout(function() {
            ANALYZIFY.activeTimer.idle = true;
        }, 5e3);
    };
    ANALYZIFY.activeMaster = function(state) {
        state === true || state === "true" || state === 1 ? ANALYZIFY.activeTimer.activeMaster = true : ANALYZIFY.activeTimer.activeMaster = false;
    };
    ANALYZIFY.sessionAlive = function() {
        var getActiveTimer = ANALYZIFY.activeTimer.counter;
        clearTimeout(ANALYZIFY.activeTimer.aliveTimer);
        ANALYZIFY.activeTimer.aliveTimer = setTimeout(function() {
            if (getActiveTimer <= ANALYZIFY.activeTimer.counter - 10) {
                ANALYZIFY.activeTimer.aliveCounter = 0;
                ANALYZIFY.dlPush("Session Alive", ANALYZIFY.ajaxPage === false ? ANALYZIFY.activeTimer.path : ANALYZIFY.ajaxPage.toLowerCase().replace(/(https:|http:|)\/\//, "").replace(ANALYZIFY.BASE, ""), ANALYZIFY.ajaxPage === false ? ANALYZIFY.activeTimer.firstPath : null, null, true, null, "fb");
            } else {
                ANALYZIFY.activeTimer.aliveCounter += 1;
            }
            if (ANALYZIFY.activeTimer.aliveCounter < 1) {
                ANALYZIFY.sessionAlive();
            }
        }, 168e4);
    };
    ANALYZIFY.sessionAlive();
    ANALYZIFY.customTimer = function(name, idleTrack, func, funcParams, funcInterval, funcLimit) {
        ANALYZIFY.customTimers = ANALYZIFY.customTimers || [];
        ANALYZIFY.customTimers[name] = ANALYZIFY.customTimers[name] || [];
        ANALYZIFY.customTimers[name]["exeNumber"] = ANALYZIFY.customTimers[name]["exeNumber"] || 0;
        ANALYZIFY.customTimers[name]["exeNumber"]++;
        if (typeof name !== "undefined" && typeof ANALYZIFY.customTimers[name]["timerInit"] === "undefined") {
            ANALYZIFY.customTimers[name]["name"] = name;
            ANALYZIFY.customTimers[name]["path"] = ANALYZIFY.getUrlPath();
            ANALYZIFY.customTimers[name]["firstPath"] = ANALYZIFY.getUrlPath(1);
            ANALYZIFY.customTimers[name]["timerInit"] = true;
            ANALYZIFY.customTimers[name]["idle"] = false;
            ANALYZIFY.customTimers[name]["activeMaster"] = false;
            ANALYZIFY.customTimers[name]["counter"] = 0;
            var intervalCounter = 1;
            func ? func = func.split("||") : "";
            funcLimit = isNaN(parseInt(funcLimit)) === false ? parseInt(funcLimit) : false;
            if (typeof idleTrack === "string") {
                ANALYZIFY.customActiveListener(name, idleTrack);
            }
            ANALYZIFY.customTimers[name]["activeTimer"] = setInterval(function() {
                if ((ANALYZIFY.customTimers[name]["idle"] === false || ANALYZIFY.customTimers[name]["activeMaster"] === true) && ANALYZIFY.activeTimer.firstActive === true && ANALYZIFY.tabHidden === false) {
                    ANALYZIFY.customTimers[name]["counter"] += 1;
                    if (ANALYZIFY.debug === true || ANALYZIFY.debug.customTimers === true) {
                        console.log(name + " - " + ANALYZIFY.customTimers[name]["counter"]);
                    }
                }
                if (typeof funcInterval !== "undefined" && isNaN(parseInt(funcInterval)) === false && ANALYZIFY.customTimers[name]["counter"] >= funcInterval * intervalCounter && funcLimit !== 0) {
                    funcParams = $.isArray(funcParams) ? funcParams : [];
                    for (i = 0; i < func.length; i++) {
                        try {
                            ANALYZIFY.func[i].apply(this, funcParams[i]);
                        } catch (e) {
                            if (e instanceof SyntaxError) {
                                console.error(e.message);
                            }
                        }
                    }
                    intervalCounter++;
                    if (funcLimit !== false) {
                        funcLimit--;
                    }
                }
            }, 1e3);
        } else if (typeof name === "undefined") {
            console.error('customTimer: "name" parameter must be defined');
        } else if (typeof ANALYZIFY.customTimers[name]["timerInit"] !== "undefined") {
            if (ANALYZIFY.customTimers[name]["exeNumber"] >= 5) {
                console.warn("customTimer: Custom Timer " + name + " already initiated. Function fired " + ANALYZIFY.customTimers[name]["exeNumber"] + " times. Limit execution number.");
            }
        } else {
            console.error("customTimer: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
        }
    };
    ANALYZIFY.unsetCustomTimer = function(name, definitive) {
        if (typeof name !== "undefined" && typeof ANALYZIFY.customTimers !== "undefined" && typeof ANALYZIFY.customTimers[name] !== "undefined" && typeof ANALYZIFY.customTimers[name]["timerInit"] !== "undefined") {
            clearInterval(ANALYZIFY.customTimers[name]["activeTimer"]);
            definitive === true || definitive === "true" || definitive === 1 ? "" : delete ANALYZIFY.customTimers[name]["timerInit"];
        } else if (typeof name === "undefined") {
            console.error('unsetCustomTimer: "name" parameter must be defined');
        } else if (typeof ANALYZIFY.customTimers === "undefined" || typeof ANALYZIFY.customTimers[name] === "undefined" || typeof ANALYZIFY.customTimers[name]["timerInit"] === "undefined") {
            console.warn("unsetCustomTimer: You cannot unset Custom Timer " + name + ", it is not initiated yet.");
        } else {
            console.error("unsetCustomTimer: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
        }
    };
    ANALYZIFY.customActiveListener = function(name, selector) {
        if (typeof name !== "undefined" && typeof selector !== "undefined" && $(selector).length !== 0 && typeof ANALYZIFY.customTimers !== "undefined" && typeof ANALYZIFY.customTimers[name] !== "undefined" && typeof ANALYZIFY.customTimers[name]["timerInit"] !== "undefined" && typeof ANALYZIFY.customTimers[name]["activeListener"] === "undefined") {
            ANALYZIFY.customTimers[name]["activeListener"] = true;
            var viewPercent = $(selector).attr("data-view-percent") ? parseInt($(selector).attr("data-view-percent")) : 50;
            var position = $(selector).offset().top;
            var height = $(selector).outerHeight();
            if (isNaN(viewPercent) === false) {
                if (viewPercent >= 0) {
                    viewPercent = viewPercent <= 100 && viewPercent >= 0 ? viewPercent : 50;
                    var viewPositionTop = position - ANALYZIFY.height + height * viewPercent / 100;
                    var viewPositionBottom = position - ANALYZIFY.menuHeight + height * (100 - viewPercent) / 100;
                } else {
                    viewPercent = -(viewPercent >= -100 && viewPercent <= 0 ? viewPercent : -50);
                    var viewPositionTop = position - ANALYZIFY.height * (100 - viewPercent) / 100;
                    var viewPositionBottom = position + height - ANALYZIFY.height * viewPercent / 100;
                }
            }
            $(selector).focus(function() {
                ANALYZIFY.customUserNonIdle(name, true);
            });
            $(selector).blur(function() {
                ANALYZIFY.customUserNonIdle(name, false);
            });
            $(selector).on("keydown", function() {
                ANALYZIFY.customUserNonIdle(name, true);
            });
            $(selector).on("mousemove", function() {
                if (ANALYZIFY.scrollTop >= viewPositionTop && ANALYZIFY.scrollTop <= viewPositionBottom) {
                    ANALYZIFY.customUserNonIdle(name, true);
                }
            });
            $(selector).on("mousedown", function() {
                ANALYZIFY.customUserNonIdle(name, true);
            });
            $(selector).scroll(function() {
                ANALYZIFY.customUserNonIdle(name, true);
            });
            $(window).scroll(function() {
                if (ANALYZIFY.scrollTop >= viewPositionTop && ANALYZIFY.scrollTop <= viewPositionBottom) {
                    ANALYZIFY.customUserNonIdle(name, true);
                }
            });
            $(window).resize(function() {
                var viewPercent = $(selector).attr("data-view-percent") ? parseInt($(selector).attr("data-view-percent")) : 50;
                var position = $(selector).offset().top;
                var height = $(selector).outerHeight();
                if (isNaN(viewPercent) === false) {
                    if (viewPercent >= 0) {
                        viewPercent = viewPercent <= 100 && viewPercent >= 0 ? viewPercent : 50;
                        var viewPositionTop = position - ANALYZIFY.height + height * viewPercent / 100;
                        var viewPositionBottom = position - ANALYZIFY.menuHeight + height * (100 - viewPercent) / 100;
                    } else {
                        viewPercent = -(viewPercent >= -100 && viewPercent <= 0 ? viewPercent : -50);
                        var viewPositionTop = position - ANALYZIFY.height * (100 - viewPercent) / 100;
                        var viewPositionBottom = position + height - ANALYZIFY.height * viewPercent / 100;
                    }
                }
            });
        } else if (typeof name === "undefined") {
            console.warn('customActiveListener: "name" parameter must be defined');
        } else if (typeof selector === "undefined") {
            console.warn('customActiveListener: "selector" parameter must be defined');
        } else if ($(selector).length === 0) {
            console.warn("customActiveListener: Selector " + selector + " dont exist in this page");
        } else if (typeof ANALYZIFY.customTimers === "undefined" || typeof ANALYZIFY.customTimers[name] === "undefined" || typeof ANALYZIFY.customTimers[name]["timerInit"] === "undefined") {
            console.warn("customActiveListener: You cannot track Custom Timer " + name + ", it is not initiated yet");
        } else if (typeof ANALYZIFY.customTimers[name]["activeListener"] !== "undefined") {
            if (ANALYZIFY.customTimers[name]["activeListener"] === true) {
                console.warn("customActiveListener: Custom Timer " + name + " is already being tracked");
            } else {
                console.warn('customActiveListener: Global variable window["customTimers"]["' + name + '"]["activeListener"] only can be setted to true, check if you are accidentally changed this value outside this function');
            }
        } else {
            console.error("customActiveListener: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
        }
    };
    ANALYZIFY.customUserNonIdle = function(name, state) {
        if (typeof name !== "undefined" && typeof ANALYZIFY.customTimers !== "undefined" && typeof ANALYZIFY.customTimers[name] !== "undefined" && typeof ANALYZIFY.customTimers[name]["timerInit"] !== "undefined") {
            if (state === true || state === "true" || state === 1) {
                ANALYZIFY.customTimers[name]["idle"] = false;
                clearTimeout(ANALYZIFY.customTimers[name]["idleTimer"]);
                ANALYZIFY.customTimers[name]["idleTimer"] = setTimeout(function() {
                    ANALYZIFY.customTimers[name]["idle"] = true;
                }, 5e3);
            } else {
                ANALYZIFY.customTimers[name]["idle"] = true;
            }
        } else if (typeof name === "undefined") {
            console.warn('customUserNonIdle: "name" parameter must be defined');
        } else if (typeof ANALYZIFY.customTimers === "undefined" || typeof ANALYZIFY.customTimers[name] === "undefined" || typeof ANALYZIFY.customTimers[name]["timerInit"] === "undefined") {
            console.warn("customUserNonIdle: You cannot change idle state of Custom Timer " + name + ", it is not initiated yet.");
        } else {
            console.error("customUserNonIdle: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
        }
    };
    ANALYZIFY.customActiveMaster = function(name, state) {
        if (typeof name !== "undefined" && typeof ANALYZIFY.customTimers !== "undefined" && typeof ANALYZIFY.customTimers[name] !== "undefined" && typeof ANALYZIFY.customTimers[name]["timerInit"] !== "undefined") {
            state === true || state === "true" || state === 1 ? ANALYZIFY.customTimers[name]["activeMaster"] = true : ANALYZIFY.customTimers[name]["activeMaster"] = false;
        } else if (typeof name === "undefined") {
            console.warn('customActiveMaster: "name" parameter must be defined');
        } else if (typeof ANALYZIFY.customTimers === "undefined" || typeof ANALYZIFY.customTimers[name] === "undefined" || typeof ANALYZIFY.customTimers[name]["timerInit"] === "undefined") {
            console.warn("customActiveMaster: You cannot change active master state of Custom Timer " + name + ", it is not initiated yet.");
        } else {
            console.error("customActiveMaster: Error not identified. If you are seeing this in your console, please, report in the repository issues tab: https://github.com/dannyfranca/analyzify-framework/issues.what changes you made");
        }
    };
    if ($("[data-click]").length) {
        var arrayClick = {};
        $("[data-click]").click(function() {
            var e = $(this).attr("data-click");
            typeof arrayClick[e] !== "undefined" ? "" : arrayClick[e] = {};
            typeof arrayClick[e].counter !== "undefined" ? "" : arrayClick[e].counter = 0;
            var clickFunc = e.split("||");
            var clickLimit = $(this).attr("data-click-limit") ? $(this).attr("data-click-limit").split(",") : "notset";
            for (i = 0; i < clickFunc.length; i++) {
                var checkLimit = isNaN(parseInt(clickLimit[i]));
                if (checkLimit === false ? clickLimit[i] > arrayClick[e].counter : true) {
                    try {
                        eval("ANALYZIFY." + clickFunc[i]);
                    } catch (er) {
                        if (er instanceof SyntaxError) {
                            console.error(er.message);
                        }
                    }
                }
            }
            arrayClick[e].counter++;
        });
    }
    if ($("[data-view]").length) {
        ANALYZIFY.viewEventExist = true;
        ANALYZIFY.arrayView = {};
        var processingViewCalc = false;
        ANALYZIFY.viewEvent = function(view, ignorealt) {
            if (ANALYZIFY.load === true && ANALYZIFY.activeTimer.firstActive === true) {
                var selector = view ? '[data-view="' + view + '"]' : "[data-view]";
                $(selector).each(function() {
                    var e = $(this).attr("data-view");
                    if (typeof ANALYZIFY.arrayView[e] !== "undefined") {
                        var timerCheck = ANALYZIFY.activeTimer.counter >= ANALYZIFY.arrayView[e]["viewTime"];
                        if (ANALYZIFY.scrollTop >= ANALYZIFY.arrayView[e]["viewPositionTop"] && ANALYZIFY.scrollTop < ANALYZIFY.arrayView[e]["viewPositionBottom"]) {
                            if (ANALYZIFY.arrayView[e]["viewHidden"] !== true && $(this).is(":visible")) {
                                if ((ANALYZIFY.arrayView[e]["alt"] !== true || ignorealt === true) && timerCheck) {
                                    if ($(this).attr("data-view-act")) {
                                        var viewFunc = $(this).attr("data-view-act").split("||");
                                        for (i = 0; i < viewFunc.length; i++) {
                                            if (isNaN(parseInt(ANALYZIFY.arrayView[e]["viewLimit"][i])) === false ? ANALYZIFY.arrayView[e]["viewLimit"][i] > ANALYZIFY.arrayView[e]["viewCounter"] : true) {
                                                try {
                                                    eval("ANALYZIFY." + viewFunc[i]);
                                                } catch (e) {
                                                    if (e instanceof SyntaxError) {
                                                        console.error(e.message);
                                                    }
                                                }
                                                if (ANALYZIFY.debug === true || ANALYZIFY.debug.view === true) {
                                                    console.log(viewFunc[i]);
                                                }
                                            }
                                        }
                                        ignorealt !== true ? ANALYZIFY.arrayView[e]["viewCounter"]++ : "";
                                    } else if (!$(this).attr("data-nonview-act")) {
                                        var viewFunc = e.split("||");
                                        for (i = 0; i < viewFunc.length; i++) {
                                            if (isNaN(parseInt(ANALYZIFY.arrayView[e]["viewLimit"][i])) === false ? ANALYZIFY.arrayView[e]["viewLimit"][i] > ANALYZIFY.arrayView[e]["viewCounter"] : true) {
                                                try {
                                                    eval("ANALYZIFY." + viewFunc[i]);
                                                } catch (e) {
                                                    if (e instanceof SyntaxError) {
                                                        console.error(e.message);
                                                    }
                                                }
                                                if (ANALYZIFY.debug === true || ANALYZIFY.debug.view === true) {
                                                    console.log(viewFunc[i]);
                                                }
                                            }
                                        }
                                        ignorealt !== true ? ANALYZIFY.arrayView[e]["viewCounter"]++ : "";
                                    }
                                }
                                ANALYZIFY.arrayView[e]["alt"] = true;
                            }
                        } else {
                            if ((ANALYZIFY.arrayView[e]["alt"] === true || ignorealt === true) && timerCheck) {
                                if ($(this).attr("data-nonview-act")) {
                                    var viewFunc = $(this).attr("data-nonview-act").split("||");
                                    for (i = 0; i < viewFunc.length; i++) {
                                        if (isNaN(parseInt(ANALYZIFY.arrayView[e]["nonViewLimit"][i])) === false ? ANALYZIFY.arrayView[e]["nonViewLimit"][i] > ANALYZIFY.arrayView[e]["nonViewCounter"] : true) {
                                            try {
                                                eval("ANALYZIFY." + viewFunc[i]);
                                            } catch (e) {
                                                if (e instanceof SyntaxError) {
                                                    console.error(e.message);
                                                }
                                            }
                                            if (ANALYZIFY.debug === true || ANALYZIFY.debug.view === true) {
                                                console.log(viewFunc[i]);
                                            }
                                        }
                                    }
                                    ignorealt !== true ? ANALYZIFY.arrayView[e]["nonViewCounter"]++ : "";
                                }
                            }
                            ANALYZIFY.arrayView[e]["alt"] = false;
                        }
                    } else {
                        console.warn('viewEvent: You cannot check if element [data-view="' + e + '"] is visible, positions is not calculated yet. You need to execute ANALYZIFY.viewEventCalc first');
                    }
                });
            }
        };
        ANALYZIFY.viewEventCalc = function(view) {
            if (processingViewCalc === false) {
                var selector = view ? '[data-view="' + view + '"]' : "[data-view]";
                $(selector).each(function() {
                    var e = $(this).attr("data-view");
                    if (typeof ANALYZIFY.arrayView[e] !== "undefined") {
                        ANALYZIFY.arrayView[e]["position"] = $(this).offset().top;
                        ANALYZIFY.arrayView[e]["height"] = $(this).outerHeight();
                    } else {
                        ANALYZIFY.arrayView[e] = {
                            position: $(this).offset().top,
                            height: $(this).outerHeight()
                        };
                    }
                    var viewTime = $(this).attr("data-view-time");
                    var checkTime = isNaN(parseInt(viewTime));
                    ANALYZIFY.arrayView[e]["viewTime"] = checkTime === false ? parseInt($(this).attr("data-view-time")) : 0;
                    ANALYZIFY.arrayView[e]["viewPercent"] = $(this).attr("data-view-percent") ? parseInt($(this).attr("data-view-percent")) : 50;
                    typeof ANALYZIFY.arrayView[e]["viewCounter"] !== "undefined" ? "" : ANALYZIFY.arrayView[e]["viewCounter"] = 0;
                    typeof ANALYZIFY.arrayView[e]["nonViewCounter"] !== "undefined" ? "" : ANALYZIFY.arrayView[e]["nonViewCounter"] = 0;
                    ANALYZIFY.arrayView[e]["viewLimit"] = $(this).attr("data-view-limit") ? $(this).attr("data-view-limit").split(",") : "notset";
                    ANALYZIFY.arrayView[e]["nonViewLimit"] = $(this).attr("data-nonview-limit") ? $(this).attr("data-nonview-limit").split(",") : "notset";
                    ANALYZIFY.arrayView[e]["viewHidden"] = $(this).attr("data-view-hidden");
                    ANALYZIFY.arrayView[e]["viewHidden"] = ANALYZIFY.arrayView[e]["viewHidden"] === 1 || ANALYZIFY.arrayView[e]["viewHidden"] === true || ANALYZIFY.arrayView[e]["viewHidden"] === "true" ? true : false;
                    if (typeof viewTime !== "undefined" && checkTime === true) {
                        console.warn('attribute data-view-time must be like a number. Check the [data-view="' + e + '"] element');
                    }
                    if (isNaN(ANALYZIFY.arrayView[e]["viewPercent"]) === false) {
                        if (ANALYZIFY.arrayView[e]["viewPercent"] >= 0) {
                            ANALYZIFY.arrayView[e]["viewPercent"] = ANALYZIFY.arrayView[e]["viewPercent"] <= 100 && ANALYZIFY.arrayView[e]["viewPercent"] >= 0 ? ANALYZIFY.arrayView[e]["viewPercent"] : 50;
                            ANALYZIFY.arrayView[e]["viewPositionTop"] = ANALYZIFY.arrayView[e]["position"] - ANALYZIFY.height + ANALYZIFY.arrayView[e]["height"] * ANALYZIFY.arrayView[e]["viewPercent"] / 100;
                            ANALYZIFY.arrayView[e]["viewPositionBottom"] = ANALYZIFY.arrayView[e]["position"] - ANALYZIFY.menuHeight + ANALYZIFY.arrayView[e]["height"] * (100 - ANALYZIFY.arrayView[e]["viewPercent"]) / 100;
                        } else {
                            ANALYZIFY.arrayView[e]["viewPercent"] = -(ANALYZIFY.arrayView[e]["viewPercent"] >= -100 && ANALYZIFY.arrayView[e]["viewPercent"] <= 0 ? ANALYZIFY.arrayView[e]["viewPercent"] : -50);
                            ANALYZIFY.arrayView[e]["viewPositionTop"] = ANALYZIFY.arrayView[e]["position"] - ANALYZIFY.height * (100 - ANALYZIFY.arrayView[e]["viewPercent"]) / 100;
                            ANALYZIFY.arrayView[e]["viewPositionBottom"] = ANALYZIFY.arrayView[e]["position"] + ANALYZIFY.arrayView[e]["height"] - ANALYZIFY.height * ANALYZIFY.arrayView[e]["viewPercent"] / 100;
                        }
                    }
                });
                ANALYZIFY.viewEvent();
                processingViewCalc = false;
            }
        };
    }
    ANALYZIFY.pageVisibilityHidden = function() {
        ANALYZIFY.tabHidden = true;
        if (ANALYZIFY.debug === true || ANALYZIFY.debug.activity === true) {
            console.log("Tab Hidden");
        }
        ANALYZIFY.setCustomEntry("pageHidden");
    };
    ANALYZIFY.pageVisibility = function() {
        ANALYZIFY.tabHidden = false;
        if (ANALYZIFY.debug === true || ANALYZIFY.debug.activity === true) {
            console.log("Tab Visible");
        }
        ANALYZIFY.setCustomEntry("pageShow");
    };
    var hidden, visibilityChange;
    if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
    }
    ANALYZIFY.handleVisibilityChange = function() {
        if (document[hidden]) {
            ANALYZIFY.pageVisibilityHidden();
        } else {
            ANALYZIFY.pageVisibility();
        }
    };
    if (!(typeof document.addEventListener === "undefined" || typeof document[hidden] === "undefined")) {
        document.addEventListener(visibilityChange, ANALYZIFY.handleVisibilityChange, false);
    }
    if (typeof ANALYZIFY.BASE !== "undefined") {
        $('a[href^="http"]').filter(function() {
            return this.href.match(/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/);
        }).click(function() {
            var href = $(this).attr("href") ? $(this).attr("href") : "";
            if ((href.indexOf("http://") !== -1 || href.indexOf("https://") !== -1) && href.indexOf(ANALYZIFY.BASE) === -1) {
                var site = href.replace(/(https:|http:|)\/\//, "");
                var n = site.indexOf("/");
                site = site.substring(0, n !== -1 ? n : site.length);
                ANALYZIFY.dlPush("Click", "Outgoing", site, href);
            }
        });
    }
    if ($('[id$="_go"]').length) {
        $('a[href^="#"]').click(function(event) {
            event.preventDefault();
            var selector = $('[id="' + $(this).attr("href").replace("#", "") + '_go"]');
            if (selector.length) {
                var goto = selector.offset().top;
                $("html, body").stop().animate({
                    scrollTop: goto - ANALYZIFY.menuInitialHeight + ANALYZIFY.logoDeltaHeight
                }, 1e3);
                return false;
            }
        });
    }
    $(".main_header_nav_item.submenu").click(function() {
        if (!$(this).hasClass("active")) {
            $(this).addClass("active");
        } else {
            $(this).removeClass("active");
        }
        $(this).children(".main_header_nav_sub").slideToggle();
    });
    $(".j_back").click(function() {
        $("html, body").animate({
            scrollTop: 0
        }, 1e3);
    });
    if ($('[data-menu="fixed-top"]').length) {
        ANALYZIFY.reduzMenu = function() {
            if (ANALYZIFY.scrollTop > 0) {
                $('[data-menu="fixed-top"]').addClass("main_header_fixed");
                ANALYZIFY.addLogo();
            }
            if (ANALYZIFY.scrollTop === 0) {
                $('[data-menu="fixed-top"]').removeClass("main_header_fixed");
                ANALYZIFY.addLogoWhite();
            }
        };
        ANALYZIFY.addLogoWhite = function() {
            if ($('[data-menu="fixed-top"].transparente .img-logo.switch').length) {
                $('[data-menu="fixed-top"] .img-logo').attr("src", logoWhiteSrc);
                $('[data-menu="fixed-top"] .mobile_action').addClass("white");
            }
        };
        ANALYZIFY.addLogo = function() {
            if ($('[data-menu="fixed-top"].transparente .img-logo.switch').length) {
                $('[data-menu="fixed-top"] .img-logo').attr("src", logoSrc);
                $('[data-menu="fixed-top"] .mobile_action').removeClass("white");
            }
        };
        ANALYZIFY.menuFixedTopExist = true;
        var logoSrc = $('[data-menu="fixed-top"] .img-logo').attr("src");
        var logoWhiteSrc = logoSrc.substr(0, logoSrc.indexOf(".")) + "-white.png";
        if ($(".j_padding_top").length) {
            $(".j_padding_top").css("padding-top", ANALYZIFY.menuInitialHeight);
        } else {
            $("body").css("padding-top", ANALYZIFY.menuInitialHeight);
        }
        $('[data-menu="fixed-top"]').addClass("fixed_top");
        if ($(window).scrollTop() > 0) {
            $('[data-menu="fixed-top"]').addClass("main_header_fixed");
        } else {
            ANALYZIFY.addLogoWhite();
        }
    }
    ANALYZIFY.mobileMenuToggle = function() {
        if (!$(".mobile_action").hasClass("active")) {
            $(".mobile_action").addClass("active");
            $(".main_header_nav").animate({
                left: "0px"
            }, 100);
        } else {
            $(".mobile_action").removeClass("active");
            $(".main_header_nav").animate({
                left: "-100%"
            }, 100);
        }
    };
    $(".mobile_action").click(function() {
        ANALYZIFY.mobileMenuToggle();
    });
    if ($(".j_back").length) {
        ANALYZIFY.botaoTopoExist = true;
        ANALYZIFY.exibeBotaoTopo = function() {
            if (ANALYZIFY.scrollTop > 0) {
                $("body").append('<div class="j_back backtop round" title="Voltar ao topo"></div>');
            } else {
                $(".j_back").remove();
            }
        };
    }
    if ($("[data-spy]").length) {
        ANALYZIFY.scrollSpyExist = true;
        var arraySpy = {};
        var processingSpy = false;
        var processingSpyCalc = false;
        ANALYZIFY.scrollSpyCalc = function() {
            if (processingSpyCalc === false) {
                processingSpyCalc = true;
                $("[data-spy]").each(function(i) {
                    var id = $(this).attr("id");
                    if (typeof id !== "undefined") {
                        arraySpy[i] = {
                            dataspy: id.replace("_go", ""),
                            position: $(this).offset().top - ANALYZIFY.menuInitialHeight,
                            height: $(this).outerHeight()
                        };
                    }
                });
                ANALYZIFY.scrollSpy();
                processingSpyCalc = false;
            }
        };
        ANALYZIFY.scrollSpy = function() {
            if (processingSpy === false) {
                processingSpy = true;
                $("[data-spy]").each(function(i) {
                    if (typeof arraySpy[i] !== "undefined") {
                        if (ANALYZIFY.scrollTop >= arraySpy[i].position - 5 && ANALYZIFY.scrollTop < arraySpy[i].position + arraySpy[i].height - 5) {
                            $('[scrollspy] [href="#' + arraySpy[i].dataspy + '"]').addClass("active");
                        } else {
                            $('[scrollspy] [href="#' + arraySpy[i].dataspy + '"]').removeClass("active");
                        }
                    }
                });
                processingSpy = false;
            }
        };
    }
    if ($("[data-modal]").length) {
        var dataModal;
        $(document).on("click", function(event) {
            if ($(event.target).has(".j_modal_box").length) {
                ANALYZIFY.closeModal();
            }
        });
        $(".j_modal_close").click(function() {
            ANALYZIFY.closeModal();
        });
        ANALYZIFY.openModal = function(setDataModal) {
            dataModal = '[data-modal="' + setDataModal + '"]';
            if ($(dataModal).length) {
                $("body").css("overflow", "hidden");
                $(dataModal).fadeIn(400, function() {
                    $(this).children().fadeIn(400, function() {
                        $(this).find("input:text:visible:first").focus();
                    });
                }).css("display", "flex");
            }
        };
        ANALYZIFY.closeModal = function() {
            $("body").css("overflow", "");
            $("[data-modal]").children().fadeOut(200, function() {
                $(this).closest("[data-modal]").fadeOut(200);
            });
        };
        var modalParam = ANALYZIFY.urlParam("modal");
        if (modalParam && modalParam !== 0) {
            ANALYZIFY.openModal(modalParam);
        }
    }
    if ($("[data-same-height]").length) {
        ANALYZIFY.jSameHeightExist = true;
        var jSameHeight = {};
        var GreaterSameHeight = {};
        var processingHeights = false;
        ANALYZIFY.sameHeight = function() {
            if (processingHeights === false) {
                processingHeights = true;
                if (ANALYZIFY.width > 460) {
                    $("[data-same-height]").each(function(i) {
                        jSameHeight[i] = jSameHeight[i] || {};
                        $(this).css("height", "");
                        if ($(this).outerWidth() / ANALYZIFY.width < .8) {
                            jSameHeight[i].check = true;
                            var order = $(this).attr("data-same-height");
                            typeof GreaterSameHeight[order] !== "undefined" ? "" : GreaterSameHeight[order] = 0;
                            jSameHeight[i].height = $(this).height();
                            if (jSameHeight[i].height > GreaterSameHeight[order]) {
                                GreaterSameHeight[order] = jSameHeight[i].height;
                            }
                        } else {
                            jSameHeight[i].check = false;
                        }
                    });
                    $("[data-same-height]").each(function(i) {
                        if (jSameHeight[i].check === true) {
                            var order = $(this).attr("data-same-height");
                            $(this).css("height", GreaterSameHeight[order]);
                        }
                    });
                    GreaterSameHeight = {};
                } else {
                    $("[data-same-height]").each(function(i) {
                        $(this).css("height", "");
                    });
                }
                ANALYZIFY.normalize();
                processingHeights = false;
            }
        };
    }
    if ($(".sharebox").length) {
        $(".facebook a").click(function() {
            var share = "https://www.facebook.com/sharer/sharer.php?u=";
            var urlOpen = $(this).attr("href");
            window.open(share + urlOpen, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, width=660, height=400");
            return false;
        });
        $(".google a").click(function() {
            var share = "https://plus.google.com/share?url=";
            var urlOpen = $(this).attr("href");
            window.open(share + urlOpen, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, width=516, height=400");
            return false;
        });
        $(".twitter a").click(function() {
            var share = "https://twitter.com/share?url=";
            var urlOpen = $(this).attr("href");
            var complement = $(this).attr("rel");
            window.open(share + urlOpen + complement, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, width=660, height=400");
            return false;
        });
    }
    if ($("[data-accord]").length) {
        $("[data-accord]").click(function() {
            var up = false;
            $(".j_accord_toogle_active").slideUp(200, function() {
                up = true;
                $(this).removeClass("j_accord_toogle_active");
                ANALYZIFY.normalize();
            });
            $(this).find(".j_accord_toogle:not(.j_accord_toogle_active)").slideToggle(200, function() {
                up !== true ? ANALYZIFY.normalize() : "";
            }).addClass("j_accord_toogle_active");
            up = false;
        });
    }
    if ($("[data-slide]").length) {
        var trackSlideClick;
        var trackSlideIndicator;
        var slideOrder;
        var slideId;
        $("[data-slide-go]").click(function() {
            slideId = $(this).attr("data-slide-go");
            trackSlideClick = '[data-slide="' + slideId + '"]';
            trackSlideIndicator = '[data-slide-ind="' + slideId + '"]';
            ANALYZIFY.slideGo();
        });
        $("[data-slide-back]").click(function() {
            slideId = $(this).attr("data-slide-back");
            trackSlideClick = '[data-slide="' + slideId + '"]';
            trackSlideIndicator = '[data-slide-ind="' + slideId + '"]';
            ANALYZIFY.slideBack();
        });
        $("[data-slide-ind]").click(function() {
            slideId = $(this).attr("data-slide-ind");
            trackSlideClick = '[data-slide="' + slideId + '"]';
            trackSlideIndicator = '[data-slide-ind="' + slideId + '"]';
            slideOrder = $(this).attr("data-order");
            ANALYZIFY.slideIndicators();
        });
        ANALYZIFY.slideGo = function() {
            if ($(trackSlideClick + ".first").next().length) {
                $(trackSlideClick + ".first").fadeOut(200, function() {
                    $(trackSlideClick + ".first").removeClass("first").next().fadeIn().addClass("first");
                    $(trackSlideIndicator + ".active").removeClass("active").next().fadeIn().addClass("active");
                });
            } else {
                $(trackSlideClick + ".first").fadeOut(200, function() {
                    $(trackSlideClick + ".first").removeClass("first");
                    $(trackSlideClick).eq(0).fadeIn().addClass("first");
                    $(trackSlideIndicator + ".active").removeClass("active");
                    $(trackSlideIndicator).eq(0).fadeIn().addClass("active");
                });
            }
            return false;
        };
        ANALYZIFY.slideBack = function() {
            if ($(trackSlideClick + ".first").index() > 1) {
                $(trackSlideClick + ".first").fadeOut(200, function() {
                    $(trackSlideClick + ".first").removeClass("first").prev().fadeIn().addClass("first");
                    $(trackSlideIndicator + ".active").removeClass("active").prev().fadeIn().addClass("active");
                });
            } else {
                $(trackSlideClick + ".first").fadeOut(200, function() {
                    $(trackSlideClick + ".first").removeClass("first");
                    $(trackSlideClick + ":last-of-type").eq(0).fadeIn().addClass("first");
                    $(trackSlideIndicator + ".active").removeClass("active");
                    $(trackSlideIndicator + ":last-of-type").eq(0).fadeIn().addClass("active");
                });
            }
            return false;
        };
        ANALYZIFY.slideIndicators = function() {
            if (!$(this).hasClass("active")) {
                $(trackSlideClick + ".first").fadeOut(200, function() {
                    $(trackSlideClick + ".first").removeClass("first");
                    $(trackSlideClick).eq(slideOrder).fadeIn().addClass("first");
                    $('[data-slide-ind="' + slideId + '"]' + ".active").removeClass("active");
                    $('[data-slide-ind="' + slideId + '"][data-order="' + slideOrder + '"]').addClass("active");
                });
            }
            return false;
        };
    }
    if (typeof ANALYZIFY.BASE !== "undefined" && ANALYZIFY.BASE === "localhost" || ANALYZIFY.BASE === "127.0.0.1") {
        $(window).resize(function() {
            ANALYZIFY.definePrefix();
        });
        ANALYZIFY.definePrefix = function() {
            if (ANALYZIFY.width < 480) {
                prefix = "0 (Até 480)";
                ANALYZIFY.executePrefix();
            } else if (ANALYZIFY.width >= 480 && ANALYZIFY.width < 768 && prefix !== "xs") {
                prefix = "xs (480 -> 768)";
                ANALYZIFY.executePrefix();
            } else if (ANALYZIFY.width >= 768 && ANALYZIFY.width < 1024 && prefix !== "sm") {
                prefix = "sm (768 -> 1024)";
                ANALYZIFY.executePrefix();
            } else if (ANALYZIFY.width >= 1024 && ANALYZIFY.width < 1280 && prefix !== "md") {
                prefix = "md (1024 -> 1280)";
                ANALYZIFY.executePrefix();
            } else if (ANALYZIFY.width >= 1280 && prefix !== "lg") {
                prefix = "lg (Maior que 1280)";
                ANALYZIFY.executePrefix();
            }
        };
        if ($(".debug").length) {
            $(".debug").each(function() {
                $(this).after('<p style="color: #fff; background: #333; padding: 10px">' + $(this).width() + "px</p>");
            });
        }
        ANALYZIFY.appendScrollTop = function() {
            $("body").append('<span class="prefixLabel" style="position: fixed; left: 0; bottom: 0; background-color: rgba(70, 70, 70, 0.8); color: #fff; padding: 10px 16px; border-radius: 0 5px 0 0; text-transform: uppercase;">' + ANALYZIFY.scrollTop + "</span>");
        };
        var prefix;
        var timerPref;
        ANALYZIFY.timerPrefix = function() {
            clearTimeout(timerPref);
            timerPref = setTimeout(function() {
                ANALYZIFY.removePrefix();
            }, 2e3);
        };
        ANALYZIFY.removePrefix = function() {
            $("span.prefixLabel").remove();
        };
        ANALYZIFY.appendPrefix = function() {
            $("body").append('<span class="prefixLabel" style="position: fixed; left: 0; bottom: 0; background-color: rgba(70, 70, 70, 0.8); color: #fff; padding: 10px 16px; border-radius: 0 5px 0 0; text-transform: uppercase;">' + prefix + "</span>");
        };
        ANALYZIFY.executePrefix = function() {
            ANALYZIFY.removePrefix();
            ANALYZIFY.appendPrefix();
            ANALYZIFY.timerPrefix();
        };
    }
});